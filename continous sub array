1.Given an unsorted array A of size N that contains only non-negative integers, find a continuous sub-array which adds to a given number S and return the left and right index(1-based indexing) of that subarray.
In case of multiple subarrays, return the subarray indexes which comes first on moving from left to right.
Note:- Both the indexes in the array should be according to 1-based indexing. You have to return an arraylist consisting of two elements left and right. In case no such subarray exists return an array consisting of element -1.


class Solution{
	public:
		vector<int> subarraysum(vector<int> arr,int s,int n)
		{
			int ptr1=0;ptr2=0;
			long long sum;
			sum=arr[0];
			if(sum==s) return{1,1}
			if(s==0) return {-1};
			while(ptr2<n-1)
			{
				if(sum + arr[ptr2+1]<=s)
				{
					sum += arr[ptr2+1];
					ptr2++;
				}
				else
				{
					sum -=arr[ptr1];

					ptr1++;
				}
				if(sum==s){
				return{ptr1+1,ptr2+1};
				}
			}
			return{-1}
		}
};
